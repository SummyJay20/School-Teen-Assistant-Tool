<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>School Teen Assistant Tool</title>
    <script src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/lucide-react/0.263.1/umd/lucide-react.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body>
    <div id="root"></div>

    <script type="text/babel">
        const { useState, useRef, useEffect } = React;
        const { BookOpen, Calculator, Microscope, Heart, Cog, Globe, Palette, DollarSign, Users, MessageCircle, Search, ChevronDown, ChevronRight, Play, CheckCircle } = lucide;

        const SchoolTeenAssistant = () => {
          const [selectedGrade, setSelectedGrade] = useState(1);
          const [selectedSubject, setSelectedSubject] = useState('mathematics');
          const [selectedTopic, setSelectedTopic] = useState(null);
          const [showQuestions, setShowQuestions] = useState(false);
          const [aiChat, setAiChat] = useState([]);
          const [aiInput, setAiInput] = useState('');
          const [isAiLoading, setIsAiLoading] = useState(false);
          const [activeTab, setActiveTab] = useState('study');
          const chatEndRef = useRef(null);

          const subjects = {
            mathematics: { name: 'Mathematics', icon: Calculator, color: 'bg-blue-500' },
            naturalScience: { name: 'Natural Science', icon: Microscope, color: 'bg-green-500' },
            lifeScience: { name: 'Life Science', icon: Heart, color: 'bg-red-500' },
            technology: { name: 'Technology', icon: Cog, color: 'bg-gray-500' },
            socialSciences: { name: 'Social Sciences', icon: Globe, color: 'bg-yellow-500' },
            languages: { name: 'Languages', icon: BookOpen, color: 'bg-purple-500' },
            creativeArts: { name: 'Creative Arts', icon: Palette, color: 'bg-pink-500' },
            ems: { name: 'Economic & Management Sciences', icon: DollarSign, color: 'bg-emerald-500' },
            lifeOrientation: { name: 'Life Orientation', icon: Users, color: 'bg-orange-500' }
          };

          const studyContent = {
            mathematics: {
              1: {
                topics: {
                  'Numbers 1-10': {
                    notes: 'Numbers are symbols we use to count things. The numbers 1 to 10 are: 1 (one), 2 (two), 3 (three), 4 (four), 5 (five), 6 (six), 7 (seven), 8 (eight), 9 (nine), 10 (ten).',
                    questions: [
                      { q: 'What number comes after 5?', a: '6' },
                      { q: 'Count from 1 to 5', a: '1, 2, 3, 4, 5' }
                    ]
                  },
                  'Simple Addition': {
                    notes: 'Addition means putting numbers together. We use the + sign. Example: 2 + 3 = 5 (two plus three equals five).',
                    questions: [
                      { q: 'What is 1 + 1?', a: '2' },
                      { q: 'What is 3 + 2?', a: '5' }
                    ]
                  }
                }
              },
              5: {
                topics: {
                  'Fractions': {
                    notes: 'A fraction shows parts of a whole. It has a numerator (top number) and denominator (bottom number). Example: 1/2 means one part out of two equal parts.',
                    questions: [
                      { q: 'What is 1/2 + 1/2?', a: '1 or 2/2' },
                      { q: 'Which is bigger: 1/3 or 1/2?', a: '1/2 is bigger' }
                    ]
                  },
                  'Multiplication Tables': {
                    notes: 'Multiplication is repeated addition. The 2 times table: 2×1=2, 2×2=4, 2×3=6, 2×4=8, 2×5=10, 2×6=12, 2×7=14, 2×8=16, 2×9=18, 2×10=20.',
                    questions: [
                      { q: 'What is 2 × 7?', a: '14' },
                      { q: 'What is 5 × 6?', a: '30' }
                    ]
                  }
                }
              },
              9: {
                topics: {
                  'Algebra Basics': {
                    notes: 'Algebra uses letters (variables) to represent unknown numbers. Example: x + 5 = 10. To solve, subtract 5 from both sides: x = 5.',
                    questions: [
                      { q: 'Solve: x + 3 = 8', a: 'x = 5' },
                      { q: 'Solve: 2x = 10', a: 'x = 5' }
                    ]
                  },
                  'Geometry': {
                    notes: 'Geometry studies shapes and space. A triangle has 3 sides, a square has 4 equal sides, a circle is round. Area of rectangle = length × width.',
                    questions: [
                      { q: 'What is the area of a rectangle with length 6 and width 4?', a: '24 square units' },
                      { q: 'How many sides does a pentagon have?', a: '5 sides' }
                    ]
                  }
                }
              }
            },
            naturalScience: {
              5: {
                topics: {
                  'States of Matter': {
                    notes: 'Matter exists in three main states: Solid (fixed shape, fixed volume), Liquid (takes shape of container, fixed volume), Gas (fills container completely).',
                    questions: [
                      { q: 'What happens when ice melts?', a: 'It changes from solid to liquid' },
                      { q: 'Name the three states of matter', a: 'Solid, liquid, and gas' }
                    ]
                  }
                }
              }
            }
          };

          const scrollToBottom = () => {
            chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });
          };

          useEffect(() => {
            scrollToBottom();
          }, [aiChat]);

          const handleAiSubmit = async () => {
            if (!aiInput.trim()) return;
            
            const userMessage = aiInput.trim();
            setAiInput('');
            setAiChat(prev => [...prev, { role: 'user', content: userMessage }]);
            setIsAiLoading(true);

            try {
              const response = await fetch("https://api.anthropic.com/v1/messages", {
                method: "POST",
                headers: {
                  "Content-Type": "application/json",
                },
                body: JSON.stringify({
                  model: "claude-sonnet-4-20250514",
                  max_tokens: 1000,
                  messages: [
                    {
                      role: "user",
                      content: `You are a helpful school assistant for grades 1-9. The student is in Grade ${selectedGrade}. Please provide a clear, age-appropriate answer for: ${userMessage}

                      Context: This is for a student studying ${subjects[selectedSubject].name}. Keep your response educational but simple enough for a Grade ${selectedGrade} student to understand.`
                    }
                  ]
                })
              });

              const data = await response.json();
              const assistantResponse = data.content[0].text;
              
              setAiChat(prev => [...prev, { role: 'assistant', content: assistantResponse }]);
            } catch (error) {
              setAiChat(prev => [...prev, { role: 'assistant', content: 'Sorry, I had trouble processing your question. Please try again!' }]);
            } finally {
              setIsAiLoading(false);
            }
          };

          const currentSubject = subjects[selectedSubject];
          const currentContent = studyContent[selectedSubject]?.[selectedGrade];

          return React.createElement('div', { className: "min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100" },
            React.createElement('div', { className: "container mx-auto px-4 py-6" },
              // Header
              React.createElement('div', { className: "bg-white rounded-xl shadow-lg p-6 mb-6" },
                React.createElement('h1', { className: "text-4xl font-bold text-center bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent" },
                  '🎓 School Teen Assistant'
                ),
                React.createElement('p', { className: "text-center text-gray-600 mt-2" },
                  'Your AI-powered study companion for Grades 1-9'
                )
              ),

              React.createElement('div', { className: "grid grid-cols-1 lg:grid-cols-4 gap-6" },
                // Sidebar
                React.createElement('div', { className: "lg:col-span-1 space-y-4" },
                  // Grade Selection
                  React.createElement('div', { className: "bg-white rounded-lg shadow-md p-4" },
                    React.createElement('h3', { className: "font-semibold text-gray-800 mb-3" }, 'Select Grade'),
                    React.createElement('div', { className: "grid grid-cols-3 gap-2" },
                      [1,2,3,4,5,6,7,8,9].map(grade =>
                        React.createElement('button', {
                          key: grade,
                          onClick: () => setSelectedGrade(grade),
                          className: `p-2 rounded-lg text-sm font-medium transition-colors ${
                            selectedGrade === grade
                              ? 'bg-blue-500 text-white'
                              : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                          }`
                        }, `Grade ${grade}`)
                      )
                    )
                  ),

                  // Subject Selection
                  React.createElement('div', { className: "bg-white rounded-lg shadow-md p-4" },
                    React.createElement('h3', { className: "font-semibold text-gray-800 mb-3" }, 'Subjects'),
                    React.createElement('div', { className: "space-y-2" },
                      Object.entries(subjects).map(([key, subject]) => {
                        const Icon = subject.icon;
                        return React.createElement('button', {
                          key: key,
                          onClick: () => setSelectedSubject(key),
                          className: `w-full flex items-center p-3 rounded-lg transition-colors ${
                            selectedSubject === key
                              ? 'bg-blue-50 border-2 border-blue-200'
                              : 'hover:bg-gray-50 border-2 border-transparent'
                          }`
                        },
                          React.createElement('div', { className: `p-2 rounded-lg ${subject.color} text-white mr-3` },
                            React.createElement(Icon, { size: 16 })
                          ),
                          React.createElement('span', { className: "text-sm font-medium text-gray-800" }, subject.name)
                        );
                      })
                    )
                  )
                ),

                // Main Content
                React.createElement('div', { className: "lg:col-span-3" },
                  // Tab Navigation
                  React.createElement('div', { className: "bg-white rounded-lg shadow-md mb-6" },
                    React.createElement('div', { className: "flex border-b" },
                      React.createElement('button', {
                        onClick: () => setActiveTab('study'),
                        className: `px-6 py-3 font-medium rounded-tl-lg ${
                          activeTab === 'study'
                            ? 'bg-blue-500 text-white'
                            : 'text-gray-600 hover:bg-gray-50'
                        }`
                      }, '📚 Study Notes'),
                      React.createElement('button', {
                        onClick: () => setActiveTab('ai'),
                        className: `px-6 py-3 font-medium rounded-tr-lg ${
                          activeTab === 'ai'
                            ? 'bg-blue-500 text-white'
                            : 'text-gray-600 hover:bg-gray-50'
                        }`
                      }, '🤖 AI Assistant')
                    ),

                    // Study Content
                    activeTab === 'study' && React.createElement('div', { className: "p-6" },
                      React.createElement('div', { className: "flex items-center mb-4" },
                        React.createElement('div', { className: `p-3 rounded-lg ${currentSubject.color} text-white mr-4` },
                          React.createElement(currentSubject.icon, { size: 24 })
                        ),
                        React.createElement('div', null,
                          React.createElement('h2', { className: "text-2xl font-bold text-gray-800" }, currentSubject.name),
                          React.createElement('p', { className: "text-gray-600" }, `Grade ${selectedGrade}`)
                        )
                      ),

                      currentContent ? React.createElement('div', { className: "space-y-4" },
                        Object.entries(currentContent.topics).map(([topicName, topicData]) =>
                          React.createElement('div', { key: topicName, className: "border rounded-lg" },
                            React.createElement('button', {
                              onClick: () => setSelectedTopic(selectedTopic === topicName ? null : topicName),
                              className: "w-full flex items-center justify-between p-4 text-left hover:bg-gray-50"
                            },
                              React.createElement('h3', { className: "font-semibold text-gray-800" }, topicName),
                              selectedTopic === topicName 
                                ? React.createElement(ChevronDown, { size: 20 }) 
                                : React.createElement(ChevronRight, { size: 20 })
                            ),
                            
                            selectedTopic === topicName && React.createElement('div', { className: "px-4 pb-4 space-y-4" },
                              // Notes
                              React.createElement('div', { className: "bg-blue-50 p-4 rounded-lg" },
                                React.createElement('h4', { className: "font-semibold text-blue-800 mb-2" }, '📝 Study Notes'),
                                React.createElement('p', { className: "text-gray-700" }, topicData.notes)
                              ),
                              
                              // Questions Toggle
                              React.createElement('button', {
                                onClick: () => setShowQuestions(!showQuestions),
                                className: "flex items-center space-x-2 bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600 transition-colors"
                              },
                                React.createElement(Play, { size: 16 }),
                                React.createElement('span', null, showQuestions ? 'Hide' : 'Show', ' Practice Questions')
                              ),
                              
                              // Questions
                              showQuestions && React.createElement('div', { className: "space-y-3" },
                                topicData.questions.map((item, idx) =>
                                  React.createElement('div', { key: idx, className: "bg-green-50 p-4 rounded-lg" },
                                    React.createElement('div', { className: "flex items-start space-x-2 mb-2" },
                                      React.createElement('span', { className: "font-semibold text-green-700" }, `Q${idx + 1}:`),
                                      React.createElement('span', { className: "text-gray-800" }, item.q)
                                    ),
                                    React.createElement('div', { className: "flex items-start space-x-2 ml-6" },
                                      React.createElement(CheckCircle, { size: 16, className: "text-green-600 mt-0.5" }),
                                      React.createElement('span', { className: "text-gray-700 font-medium" }, item.a)
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      ) : React.createElement('div', { className: "text-center py-12" },
                        React.createElement(BookOpen, { size: 48, className: "mx-auto text-gray-400 mb-4" }),
                        React.createElement('p', { className: "text-gray-600" }, `Content for Grade ${selectedGrade} ${currentSubject.name} is being prepared.`),
                        React.createElement('p', { className: "text-sm text-gray-500 mt-2" }, 'Try the AI Assistant for help with any questions!')
                      )
                    ),

                    // AI Assistant
                    activeTab === 'ai' && React.createElement('div', { className: "p-6" },
                      React.createElement('div', { className: "flex items-center mb-4" },
                        React.createElement('div', { className: "p-3 rounded-lg bg-purple-500 text-white mr-4" },
                          React.createElement(MessageCircle, { size: 24 })
                        ),
                        React.createElement('div', null,
                          React.createElement('h2', { className: "text-2xl font-bold text-gray-800" }, 'AI Study Assistant'),
                          React.createElement('p', { className: "text-gray-600" }, 'Ask me anything about your studies!')
                        )
                      ),

                      // Chat Area
                      React.createElement('div', { className: "bg-gray-50 rounded-lg h-96 p-4 mb-4 overflow-y-auto" },
                        aiChat.length === 0 && React.createElement('div', { className: "text-center py-12" },
                          React.createElement(MessageCircle, { size: 48, className: "mx-auto text-gray-400 mb-4" }),
                          React.createElement('p', { className: "text-gray-600" }, "Hi! I'm your AI study assistant."),
                          React.createElement('p', { className: "text-sm text-gray-500 mt-2" }, `Ask me questions about Grade ${selectedGrade} ${currentSubject.name} or any other subject!`)
                        ),
                        
                        aiChat.map((message, idx) =>
                          React.createElement('div', { key: idx, className: `mb-4 flex ${message.role === 'user' ? 'justify-end' : 'justify-start'}` },
                            React.createElement('div', { 
                              className: `max-w-xs lg:max-w-md px-4 py-2 rounded-lg ${
                                message.role === 'user'
                                  ? 'bg-blue-500 text-white'
                                  : 'bg-white text-gray-800 shadow-md'
                              }`
                            },
                              React.createElement('p', { className: "text-sm" }, message.content)
                            )
                          )
                        ),
                        
                        isAiLoading && React.createElement('div', { className: "flex justify-start mb-4" },
                          React.createElement('div', { className: "bg-white text-gray-800 shadow-md px-4 py-2 rounded-lg" },
                            React.createElement('div', { className: "flex space-x-1" },
                              React.createElement('div', { className: "w-2 h-2 bg-gray-400 rounded-full animate-bounce" }),
                              React.createElement('div', { className: "w-2 h-2 bg-gray-400 rounded-full animate-bounce", style: { animationDelay: '0.1s' } }),
                              React.createElement('div', { className: "w-2 h-2 bg-gray-400 rounded-full animate-bounce", style: { animationDelay: '0.2s' } })
                            )
                          )
                        ),
                        React.createElement('div', { ref: chatEndRef })
                      ),

                      // Chat Input
                      React.createElement('div', { className: "flex space-x-2" },
                        React.createElement('input', {
                          type: "text",
                          value: aiInput,
                          onChange: (e) => setAiInput(e.target.value),
                          onKeyPress: (e) => e.key === 'Enter' && handleAiSubmit(),
                          placeholder: "Ask me a question about your studies...",
                          className: "flex-1 px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500",
                          disabled: isAiLoading
                        }),
                        React.createElement('button', {
                          onClick: handleAiSubmit,
                          disabled: isAiLoading || !aiInput.trim(),
                          className: "px-6 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
                        }, 'Send')
                      )
                    )
                  )
                )
              )
            )
          );
        };

        ReactDOM.render(React.createElement(SchoolTeenAssistant), document.getElementById('root'));
    </script>
</body>
</html>